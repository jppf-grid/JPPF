#------------------------------------------------------------------------------#
# JPPF.                                                                        #
# Copyright (C) 2005-2019 JPPF Team.                                           #
# http://www.jppf.org                                                          #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License");              #
# you may not use this file except in compliance with the License.             #
# You may obtain a copy of the License at                                      #
#                                                                              #
#    http://www.apache.org/licenses/LICENSE-2.0                                #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
#------------------------------------------------------------------------------#

#-----------------------------------------------------------------------------------#
# The ${table} placeholder in all statements is substituted at initialization time  #
# with the table name specified in the job persistence configuration, if any. If    #
# unspecified, the default table name 'JOB_PERSISTENCE' is used. Example config:    #
# jppf.job.persistence = org.jppf.job.persistence.impl.DatabasePersistence MY_TABLE #
#-----------------------------------------------------------------------------------#

# Lock the selected row for update
# Parameters:
# 1: NODEID
# 2: ALGORITHMID of object
select.for.update.sql = SELECT * FROM ${table} WHERE NODEID = ? AND ALGORITHMID = ? FOR UPDATE

# Insert a new object
# Parameters:
# 1: job NODEID
# 2: ALGORITHMID of object
# 4: object content provided as an InputStream
insert.sql = INSERT INTO ${table} (NODEID, ALGORITHMID, STATE) VALUES (?, ?, ?)

# Update an existing object
# Parameters:
# 1: the algorithm state to store
# 1: id of the node for which to store an algo
# 2: id of the algorithm to store
update.sql = UPDATE ${table} SET STATE = ? WHERE NODEID = ? AND ALGORITHMID = ?

# Load an object
# Parameters:
# 1: id of the node for which to load an algo
# 2: id of the algorithm to find
load.sql = SELECT STATE FROM ${table} WHERE NODEID = ? AND ALGORITHMID = ?

# Get all (node id, algorithm id) associations
# No Parameter.
get.all = SELECT NODEID, ALGORITHMID FROM ${table}

# Get all node ids
# No Parameter.
get.all.nodes.sql = SELECT DISTINCT NODEID FROM ${table}

# Get all node ids that have the specified algorithm
# Parameters:
# 1: id of the algorithm to find
get.all.nodes.with.algo.sql = SELECT NODEID FROM ${table} where ALGORITHMID = ?

# Get all algorithm ids for the spceified node
# Parameters:
# 1: id of the node for which to find the algorithms
get.all.algos.for.node.sql = SELECT ALGORITHMID FROM ${table} where NODEID = ?

# Get a node id with the specified alogrithm (existence test)
# Parameters:
# 1: id of the node for which to find the algorithms
# 2: id of the algorithm to find
get.node.with.algo.sql = SELECT NODEID FROM ${table} where NODEID = ? AND ALGORITHMID = ?

# Delete everything
# No parameter
delete.sql = DELETE FROM ${table}

# Delete all algorithms for the specified node
# Parameters:
# 1: id of the node to delete
delete.node.sql = DELETE FROM ${table} WHERE NODEID = ?

# Delete the specified algorithms in all the nodes
# Parameters:
# 1: id of the algorithm to delete in all the ndoes
delete.algo.all.nodes.sql = DELETE FROM ${table} WHERE ALGORITHMID = ?

# Delete an algorithm for the specified node
# Parameters:
# 1: id of the node from wxich to delete the algorithm
# 2: id of the algorithm to delete from the node
delete.algo.sql = DELETE FROM ${table} WHERE NODEID = ? AND ALGORITHMID = ?

# Whether an entry exists
# Parameters:
# 1: id of the node
# 2: id of the algorithm
exists.sql = SELECT COUNT(NODEID) FROM ${table} WHERE NODEID = ? AND ALGORITHMID = ?
