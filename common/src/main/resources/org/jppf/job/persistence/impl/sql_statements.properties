#------------------------------------------------------------------------------#
# JPPF.                                                                        #
# Copyright (C) 2005-2019 JPPF Team.                                           #
# http://www.jppf.org                                                          #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License");              #
# you may not use this file except in compliance with the License.             #
# You may obtain a copy of the License at                                      #
#                                                                              #
#    http://www.apache.org/licenses/LICENSE-2.0                                #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
#------------------------------------------------------------------------------#

#-----------------------------------------------------------------------------------#
# The ${table} placeholder in all statements is substituted at initialization time  #
# with the table name specified in the job persistence configuration, if any. If    #
# unspecified, the default table name 'JOB_PERSISTENCE' is used. Example config:    #
# jppf.job.persistence = org.jppf.job.persistence.impl.DatabasePersistence MY_TABLE #
#-----------------------------------------------------------------------------------#

# Lock the selected row for update
# Parameters:
# 1: job uuid
# 2: type of object
# 3: task position if type is task or task result, otherwise -1
store.select.for.update = SELECT * FROM ${table} WHERE UUID = ? AND TYPE = ? AND POSITION = ? FOR UPDATE

# Insert a new object
# Parameters:
# 1: job uuid
# 2: type of object
# 3: task position if type is task or task result, otherwise -1
# 4: object content provided as an InputStream
store.insert.sql = INSERT INTO ${table} (UUID, TYPE, POSITION, CONTENT) VALUES (?, ?, ?, ?)

# Update an existing object
# Parameters:
# 1: object content provided as an InputStream
# 2: job uuid
# 3: type of object
# 4: task position if type is task or task result, otherwise -1
store.update.sql = UPDATE ${table} SET CONTENT = ? WHERE UUID = ? AND TYPE = ? AND POSITION = ?

# Load an object
# Parameters:
# 1: job uuid
# 2: type of object
# 3: task position if the type is task or task result, otherwise -1
load.sql = SELECT CONTENT FROM ${table} WHERE UUID = ? AND TYPE = ? AND POSITION = ?

# Get the positions of objects of a given type (task or task result)
# Parameters:
# 1: job uuid
# 2: type of object
get.positions.sql = SELECT POSITION FROM ${table} WHERE UUID = ? AND TYPE = ? ORDER BY POSITION

# Get all jobs uuids
# No Parameter.
get.all.uuids.sql = SELECT DISTINCT UUID FROM ${table}

# Delete a job
# Parameters:
# 1: job uuid
delete.job.sql = DELETE FROM ${table} WHERE UUID = ?

# Whether a job exists
# Parameters:
# 1: job uuid
# 2: type of object
exists.job.sql = SELECT COUNT(UUID) FROM ${table} WHERE UUID = ? AND TYPE = ?
