<!--
  JPPF
  Copyright (C) 2005-2019 JPPF Team. 
  http://www.jppf.org

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<project name="JPPF-tests" basedir="." default="build" xmlns:if="ant:if" xmlns:unless="ant:unless">

  <!-- ========================================================================= -->
  <!-- Property definitions                                                      -->
  <!-- ========================================================================= -->

  <property name="build.sysclasspath" value="last"/>
  <!--
  <property name="build.compiler"     value="extJavac"/>
  -->
  <property name="jppf"               value="${basedir}/../JPPF"/>
  <property name="lib"                value="${basedir}/target/lib"/>
  <property name="src"                value="${basedir}/src"/>
  <property name="framework.src"      value="${src}/framework"/>
  <property name="tests.src"          value="${src}/tests"/>
  <property name="addons.src"         value="${src}/addons"/>
  <property name="resources.src"      value="${src}/resources"/>
  <property name="classes"            value="${basedir}/classes"/>
  <property name="framework.classes"  value="${classes}/framework"/>
  <property name="tests.classes"      value="${classes}/tests"/>
  <property name="addons.classes"     value="${classes}/addons"/>
  <property name="build"              value="${basedir}/build"/>
  <property name="report"             value="${basedir}/report"/>

  <!-- JPPF modules -->
  <property name="client"             value="${basedir}/../client"/>
  <property name="common"             value="${basedir}/../common"/>
  <property name="jmxremote-nio"      value="${basedir}/../jmxremote-nio"/>
  <property name="server"             value="${basedir}/../server"/>
  <property name="node"               value="${basedir}/../node"/>
  <property name="samples-pack"       value="${basedir}/../samples-pack"/>

  <property file="${jppf}/bin/build.properties"/>
  <property file="${jppf}/bin/build.number"/>

  <!-- ========================================================================= -->
  <!-- Classpath definitions                                                     -->
  <!-- ========================================================================= -->
  <!--
  <path id="tests.classpath">
    <pathelement location="${tests.classes}/config"/>
    <pathelement location="${basedir}/test-resources/client1"/>
    <pathelement location="${framework.classes}"/>
    <pathelement location="${tests.classes}"/>
    <pathelement location="${addons.classes}"/>
    <pathelement location="${client}/classes"/>
    <pathelement location="${common}/classes"/>
    <pathelement location="${jmxremote-nio}/classes"/>
    <pathelement location="${server}/classes"/>
    <pathelement location="${node}/classes"/>
    <pathelement location="${lib}/Groovy/groovy-all-1.6.5.jar"/>
    <pathelement location="${lib}/LZ4/lz4-java-1.6.0.jar"/>
    <pathelement location="${lib}/HikariCP/HikariCP-java7-2.4.11.jar"/>
    <pathelement location="${lib}/slf4j/slf4j-api-1.7.25.jar"/>
    <pathelement location="${lib}/slf4j/slf4j-log4j12-1.7.25.jar"/>
    <pathelement location="${lib}/log4j/log4j-1.2.15.jar"/>
    <pathelement location="${lib}/ApacheCommons/commons-io-2.4.jar"/>
    <fileset dir="${lib}/JUnit" includes="*.jar"/>
    <fileset dir="${lib}/JNA" includes="*.jar"/>
    <fileset dir="${lib}/oshi" includes="*.jar"/>
    <pathelement location="${samples-pack}/KryoSerializer/classes"/>
    <fileset dir="${samples-pack}/KryoSerializer/lib" includes="*.jar"/>
    <fileset dir="${basedir}/lib" includes="*.jar"/>
  </path>
  -->

  <path id="tests.classpath">
    <pathelement location="${tests.classes}/config"/>
    <pathelement location="${basedir}/test-resources/client1"/>
    <pathelement location="${framework.classes}"/>
    <pathelement location="${tests.classes}"/>
    <pathelement location="${addons.classes}"/>
    <fileset dir="${lib}" includes="*.jar"/>
    <pathelement location="${samples-pack}/KryoSerializer/classes"/>
    <fileset dir="${samples-pack}/KryoSerializer/lib" includes="*.jar"/>
    <fileset dir="${basedir}/lib" includes="*.jar"/>
  </path>


  <!-- ========================================================================= -->
  <!-- Build and run the JUnit tests                                             -->
  <!-- ========================================================================= -->

  <target name="build" depends="compile, jar"/>

  <!-- ========================================================================= -->
  <!--  Compile the JUnit tests                                                  -->
  <!-- ========================================================================= -->

  <target name="compile" depends="dependencies">
    <path id="checkstyle.path">
      <fileset dir="${lib}/Checkstyle" includes="*.jar"/>
    </path>
    <!--
    <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpathref="checkstyle.path"/>
    -->
    <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpathref="tests.classpath"/>
    <checkstyle config="${jppf}/CheckStyle_JPPF_config.xml" if:true="run.checkstyle">
      <fileset dir="${framework.src}" includes="**/*.java"/>
      <fileset dir="${addons.src}" includes="**/*.java"/>
      <fileset dir="${tests.src}" includes="**/*.java"/>
    </checkstyle>
    <delete dir="${framework.classes}" quiet="true" includes="**/*.*"/>
    <delete dir="${addons.classes}" quiet="true" includes="**/*.*"/>
    <delete dir="${tests.classes}" quiet="true" includes="**/*.*"/>
    <mkdir dir="${addons.classes}"/>
    <mkdir dir="${framework.classes}"/>
    <mkdir dir="${tests.classes}"/>
    <echo message="compiling addons classes: ${addons.classes}"/>
    <javac destdir="${addons.classes}" source="1.8" target="1.8" debug="on" deprecation="off" optimize="on" includes="**/*.java" createMissingPackageInfoClass="false">
      <classpath refid="tests.classpath"/>
      <compilerarg line="-Xlint:unchecked"/>
      <src path="${addons.src}"/>
    </javac>
    <copy todir="${addons.classes}">
      <fileset dir="${addons.src}" excludes="**/*.class"/>
    </copy>
    <echo message="compiling framework classes: ${tests.classes}"/>
    <javac destdir="${framework.classes}" source="1.8" target="1.8" debug="on" deprecation="off" optimize="on" includes="**/*.java" createMissingPackageInfoClass="false">
      <classpath refid="tests.classpath"/>
      <compilerarg line="-Xlint:unchecked"/>
      <src path="${framework.src}"/>
    </javac>
    <echo message="compiling unit test classes: ${tests.classes}"/>
    <javac destdir="${tests.classes}" source="1.8" target="1.8" debug="on" deprecation="off" optimize="on" includes="**/*.java" createMissingPackageInfoClass="false">
      <classpath refid="tests.classpath"/>
      <compilerarg line="-Xlint:unchecked"/>
      <src path="${tests.src}"/>
    </javac>
    <copy todir="${tests.classes}">
      <fileset dir="${resources.src}"/>
      <fileset dir="${tests.src}" excludes="**/*.java"/>
    </copy>
  </target>

  <!-- ========================================================================= -->
  <!-- Create the test framework jar file                                        -->
  <!-- ========================================================================= -->

  <target name="jar">
    <tstamp>
      <format property="readable.now" pattern="yyyy-MM-dd hh:mm z"/>
    </tstamp>
    <jar jarfile="${build}/jppf-test-framework.jar" index="true">
      <fileset dir="${framework.classes}"/>
      <fileset file="${jppf}/bin/build.number"/>
      <manifest>
        <attribute name="JPPF-Description" value="JPPF Test Framework"/>
        <attribute name="JPPF-Version" value="${version.number}"/>
        <attribute name="JPPF-Build" value="${build.number}"/>
        <attribute name="JPPF-BuildDate" value="${readable.now}"/>
      </manifest>
    </jar>
  </target>

  <!-- ========================================================================= -->
  <!-- Generates the list of test classes                                        -->
  <!-- ========================================================================= -->

  <target name="generate.tests.list">
    <echo message="Generating the list of test classes"/>
    <java fork="yes" classname="test.org.jppf.test.runner.TestListBuilder" classpathref="tests.classpath">
      <jvmarg value="-server"/>
      <jvmarg value="-Xmx64m"/>
      <arg value="${tests.classes}"/>
      <arg value="${tests.classes}/TestClasses.txt"/>
    </java>
    <copy todir="${resources.src}" file="${tests.classes}/TestClasses.txt" overwrite="true"/>
  </target>

  <!-- ========================================================================= -->
  <!-- Run the JUnit tests                                                       -->
  <!-- ========================================================================= -->

  <target name="run"            depends="compile, generate.tests.list, runtests" description=""/>
  <target name="run.nogenerate" depends="compile,                      runtests" description=""/>
  <target name="run.junit"      depends="compile, run.junit.tests"               description=""/>
  <target name="run.junit.lite" depends="compile, run.junit.tests.lite"          description=""/>
  <target name="run.junit.min"  depends="compile, run.junit.tests.min"           description=""/>
  <target name="run.junit.one"  depends="compile, run.junit.tests.one"           description=""/>

  <!-- Run the tests with a custom JUnit runner -->
  <target name="runtests">
    <echo message="Running the tests"/>
    <java fork="true" classname="test.org.jppf.test.runner.JPPFTestRunner" classpathref="tests.classpath" failonerror="true">
      <jvmarg value="-server"/>
      <jvmarg value="-Xmx512m"/>
      <jvmarg value="-Djppf.config.plugin=test.org.jppf.test.setup.TestConfigSource"/>
      <jvmarg value="-Dlog4j.configuration=log4j-client.properties"/>
      <jvmarg value="-Djava.util.logging.config.file=${tests.classes}/config/logging-client.properties"/>
      <arg value="-s"/>
    </java>
  </target>

  <!-- ========================================================================= -->
  <!-- Run all the tests with the Ant Junit runner                               -->
  <!-- ========================================================================= -->

  <target name="run.junit.tests">
    <echo message="Running the tests in basedir=${basedir}, user.dir=${user.dir}"/>
    <test>
      <fileset-elements>
        <include name="**/Test*.java"/>
      </fileset-elements>
    </test>
  </target>

  <target name="run.junit.tests.lite">
    <echo message="Running the tests in basedir=${basedir}, user.dir=${user.dir}"/>
    <test>
      <fileset-elements>
        <include name="**/Test*.java"/>
        <exclude name="**/TestLocalJPPFClassLoader.java"/>
        <exclude name="**/TestResourceLookupLocalNode.java"/>
        <exclude name="**/TestJobManyConnections.java"/>
        <exclude name="**/TestJPPFClientInit.java"/>
        <exclude name="**/TestJobPersistence.java"/>
        <exclude name="**/TestFileDataLocation.java"/>

        <!-- job persistence -->
        <exclude name="**/job/persistence/*Concurrent*.*"/>
        <exclude name="**/job/persistence/*Persistence.java"/>
        <exclude name="**/job/persistence/*PersistenceAsync.java"/>
        <exclude name="**/job/persistence/*PersistenceCacheable.java"/>

        <exclude name="**/load/balancer/persistence/*.*"/>
        <exclude name="**/TestJPPFDriverAdminMBean2.java"/>
        <exclude name="**/TestNodeRestart.java"/>
        <exclude name="**/TestJPPFNodeProvisioning.java"/>
        <exclude name="**/Test*NodeForwardingMBean2.java"/>
        <exclude name="**/TestJPPFNodeTaskMonitorMBean.java"/>

        <!-- serialization -->
        <exclude name="**/jppf/serialization/*WithLZ4.*"/>
        <exclude name="**/jppf/serialization/*WithZLIB.*"/>

        <!-- multi-server -->
        <exclude name="**/jppf/server/peer/TestManyServers.*"/>
        <exclude name="**/jppf/server/peer/TestMultiServer.*"/>
        <exclude name="**/jppf/server/peer/TestMultiServerSetup.*"/>
        <exclude name="**/jppf/server/peer/TestMultiServerWithOrphan.*"/>
        <exclude name="**/jppf/server/peer/TestMultiServerWithSSLSetup.*"/>

        <exclude name="**/TestJPPFJobSLA2.java"/>
        <exclude name="**/TestJPPFJobSLA4.java"/>
        <exclude name="**/TestGridPolicy.java"/>
        <exclude name="**/Test*PreferencePolicy.java"/>
        <exclude name="**/TestLocalNode.java"/>
        <exclude name="**/TestJobReservation.java"/>
        <exclude name="**/TestTaskGraph*Traversal.java"/>
        <exclude name="**/TestSSL2.java"/>
        <exclude name="**/TestSSL3.java"/>
        <exclude name="**/TestJPPFStatistics.java"/>
        <exclude name="**/Test*Forwarder.java"/>
      </fileset-elements>
    </test>
  </target>
  
  <target name="run.junit.tests.min">
    <echo message="Running the tests in basedir=${basedir}, user.dir=${user.dir}"/>
    <test>
      <fileset-elements>
        <include name="**/TestJPPFClient.java"/>
        <include name="**/test/org/jppf/comm/interceptor/Test*.java"/>
        <include name="**/test/org/jppf/jmxremote/Test*.java"/>
        <include name="**/test/org/jppf/job/estJobSelector.java"/>
        <include name="**/test/org/jppf/client/TestJPPFClient2.java"/>
        <include name="**/test/org/jppf/client/TestOperator.java"/>
        <include name="**/test/org/jppf/job/persistence/TestConcurrentFilePersistence.java"/>
        <include name="**/test/org/jppf/management/TestEnvironmentProviders.java"/>
        <include name="**/test/org/jppf/management/TestJMXConnectionWrapper.java"/>
        <include name="**/test/org/jppf/management/TestJMXServer.java"/>
        <include name="**/test/org/jppf/management/TestNodeSelector.java"/>
        <include name="**/test/org/jppf/node/policy/TestExecutionPolicy.java"/>
        <include name="**/test/org/jppf/node/policy/TestIsInIPv4Subnet.java"/>
        <include name="**/test/org/jppf/node/policy/TestIsInIPv6Subnet.java"/>
        <include name="**/test/org/jppf/node/protocol/graph/TestTaskDependencies.java"/>
        <include name="**/test/org/jppf/scheduling/TestJPPFSchedule.java"/>
        <include name="**/test/org/jppf/serialization/TestSerialization.java"/>
        <include name="**/test/org/jppf/server/protocol/TestLocation.java"/>
        <include name="**/test/org/jppf/utils/Test*.java"/>
        <include name="**/test/org/jppf/utils/stats/TestJPPFStatisticsListener.java"/>
      </fileset-elements>
    </test>
  </target>
  
  <target name="run.junit.tests.one">
    <echo message="Running the tests in basedir=${basedir}, user.dir=${user.dir}"/>
    <test>
      <fileset-elements>
        <include name="**/test/org/jppf/comm/interceptor/Test*.java"/>
      </fileset-elements>
    </test>
  </target>
  
  <!-- ========================================================================= -->
  <!-- Run the test classes whose name are specified as an include pattern in    -->
  <!-- a system property Example: to run test.org.jppf.client.TestJPPFClient use -->
  <!-- the command 'ant test.pattern -Dpattern=**/TestJPPFClient.java'           -->
  <!-- ========================================================================= -->

  <target name="test.pattern">
    <echo message="Running the tests in basedir=${basedir}, user.dir=${user.dir}, pattern=${pattern}"/>
    <test>
      <fileset-elements>
        <include name="${pattern}"/>
      </fileset-elements>
    </test>
  </target>
  
  <target name="test.pattern2">
    <echo message="Running the tests in basedir=${basedir}, user.dir=${user.dir}, pattern=${pattern}"/>
    <test repeatTest="true">
      <fileset-elements>
        <include name="${pattern}"/>
      </fileset-elements>
    </test>
  </target>
  
  <target name="test.pattern2.failed" if="tests.failed">
    <echo message="Creating failure file"/>
    <propertyfile file="failure.log" comment="Test failure"/>
  </target>
  
  <!--
    Run the tests in a provided fileset.
    Attributes:
    - repeatTest: whether the test suite is repeated (to test intermittent failures)
    Elements:
    - filset-elements: elements of a fileset which provides the tests to run
  -->
  <macrodef name="test">
    <attribute name="repeatTest" default="false"/>
    <element name="fileset-elements" optional="true"/>
    <sequential>
      <mkdir dir="${report}"/>
      <delete dir="${report}" quiet="true" includes="**/*.*"/>
      <junit printsummary="yes" fork="yes" dir="${basedir}" enableTestListenerEvents="true" showoutput="true" logfailedtests="true"
        failureproperty="tests.failed" errorproperty="tests.failed" filtertrace="off">
        <classpath refid="tests.classpath"/>
        <jvmarg value="-server"/>
        <jvmarg value="-Xmx512m"/>
        <jvmarg value="-Duser.dir=${basedir}"/>
        <jvmarg value="-Djppf.config.plugin=test.org.jppf.test.setup.TestConfigSource"/>
        <jvmarg value="-Dlog4j.configuration=log4j-client.properties"/>
        <jvmarg value="-Djava.util.logging.config.file=${tests.classes}/config/logging-client.properties"/>
        <formatter type="xml"/>
        <batchtest fork="yes" todir="${report}" skipNonTests="true">
          <fileset dir="${tests.src}">
            <fileset-elements/>
            <exclude name="**/JPPFSuite.java"/>
            <exclude name="**/package-info.java"/>
          </fileset>    
        </batchtest>
      </junit>
      <antcall target="test.pattern2.failed" if:true="@{repeatTest}"/>
      <antcall target="zip.last.test.logs"/>
      <antcall target="junit.report"/>
      <antcall target="zip.results"/>
      <fail if="tests.failed" status="1">Test failure, aborting build</fail>
    </sequential>
  </macrodef>
  
  <!-- ========================================================================= -->
  <!-- Zip the log files remaining after the last test has run                   -->
  <!-- ========================================================================= -->
  
  <target name="zip.last.test.logs">
    <property name="last.zip" value="${basedir}/logs/z.last.test.zip"/>
    <delete file="${last.zip}" quiet="true"/>
    <zip destfile="${last.zip}">
      <zipfileset dir="${basedir}">
        <include name="*.log"/>
      </zipfileset>
    </zip>
  </target>

  <!-- ========================================================================= -->
  <!-- Zip the build results                                                     -->
  <!-- ========================================================================= -->
  
  <target name="zip.results">
    <property name="results.file" value="all_results.zip"/>
    <delete file="${basedir}/${results.file}" quiet="true"/>
    <zip destfile="${basedir}/${results.file}">
      <zipfileset dir="${basedir}/logs" prefix="logs">
        <include name="*.zip"/>
        <exclude name="${results.file}"/>
      </zipfileset>
      <zipfileset dir="${basedir}" prefix="logs">
        <include name="*.log"/>
      </zipfileset>
      <zipfileset dir="${basedir}/report" prefix="report">
        <exclude name="*.xml"/>
      </zipfileset>
    </zip>
  </target>

  <!-- ========================================================================= -->
  <!-- Generate the JUnit HTML report                                            -->
  <!-- ========================================================================= -->
    
  <target name="junit.report">
    <junitreport todir="${report}">
      <fileset dir="${report}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${report}" styledir="${tests.classes}"/>
    </junitreport>
    <!--<copy todir="${report}" file="${basedir}/stylesheet.css"/>
    <fail if="tests.failed">Test failure, aborting build</fail>
    -->
  </target>

  <!-- ========================================================================= -->
  <!-- Download JPPF dependencies                                                -->
  <!-- ========================================================================= -->

  <import file="../JPPF/bin/build-libs.xml"/>

  <property name="h2.version" value="1.4.195"/>
  <property name="scala.version" value="2.11.8"/>

  <target name="dependencies" description="download libs">
    <get.maven.lib g="org.scala-lang"           a="scala-library" v="${scala.version}" dest="${basedir}/lib" destfile="${basedir}/lib/scala-library.jar"/>
    <get.maven.lib g="org.scala-lang"           a="scala-reflect" v="${scala.version}" dest="${basedir}/lib" destfile="${basedir}/lib/scala-reflect.jar"/>
    <get.maven.lib g="com.h2database"           a="h2"            v="${h2.version}"    dest="${basedir}/lib" destfile="${basedir}/lib/h2.jar"/>
    <get.maven.lib g="com.thoughtworks.xstream" a="xstream"       v="1.4.11.1"         dest="${basedir}/lib" destfile="${basedir}/lib/xstream.jar"/>
    <get.maven.lib g="xpp3"                     a="xpp3_min"      v="1.1.4c"           dest="${basedir}/lib" destfile="${basedir}/lib/xpp3_min.jar"/>
    <get.maven.lib g="xmlpull"                  a="xmlpull"       v="1.1.3.1"          dest="${basedir}/lib" destfile="${basedir}/lib/xmlpull.jar"/>
  </target>

</project> 
